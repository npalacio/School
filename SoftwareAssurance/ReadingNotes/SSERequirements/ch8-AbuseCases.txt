-software builders usually focusing on describing what a system will do when everything goes right
-'emergent properties' = cumulative/aggregate properties of software that slowly take shape?
    -these are complicated
-people are starting to demand security from software vendors
-developers should start asking 'what might a bad person cause to go wrong here?'
-thought exercise - assume best engineer now is bad guy, what damage could they do?
-previous academics recommend use and abuse cases leveraged in tandem
-security is an emergent property, not a feature
-security is not an external thing that can be attached or added, it must be considered in all phases of SDLC
    -think like a bad guy in all phases of SDLC, constantly ask how something new can be abused
-'clever attackers always try to undermine the assumptions a system was built on'
-attackers will always check some things
    -intersystem communication
    -edge cases
    -etc.
-what assumptions are in our system?
-what could make those assumptions false?
-what kinds of attack patterns will an attacker use?
-'abuse is always possible at the places where legitimate use is possible'
-attackers are usually able to do things that your normal users cannot or will not
-attackers can be in a different place than your user, they are not always using the same interface as your user
    -man in the middle attacks
-abuse case = how should the system react to an illegitimate use

Abuse Case Development
-abuse cases built by requirements engineers and security analysts
-threat = bad actor, a person
    -!= vulnerability
    -!= risk
-should understand who you enemy is likely to be? seems like more of your own assumptions
-creating anti-requirements and attack model = 2 important activities

Anti-requirements
-things you dont want your software to do
-generated by analyzing requirements and use cases with threats
-trying to explicitly undermine requirements
-usually deal with lack of or failure of a security function
    -what can happen with lack of encryption?
-challenge the assumption of a requirements
    -'given an input X', play with what X could really be

Attack model
-consider known attacks or attack types
    -filter these down to those that might apply to your system, build abuse cases around them
    -include anyone who can gain access to the system
        -sounds like more assumptions
-process shown creates a set of ranked abuse cases
    -using threats (bad actors), their goals, relevant attack patterns and an attack model
    -take a person and their motivations, consider what they could do

-attack patterns are helpful, allow for variation
-abuse cases should be generated with SMEs and security experts


