Final Exam
1. 
	a. Declarative, functional, imperative.
		- Declarative - talking about WHAT something is
		- Functional - defining functions that can be composed together to compute something
		- Imperative - talking about HOW to compute something
		
		- Post grammar - The Post Grammar (or context free grammar) is a computational model based around string manipulation
		and substitution where you have
		terminal symbols, non-terminal symbols (variables), an initial start symbol and a set of production rules. A production rule
		is where you say a symbol can be substituted using another symbol, either terminal or non-terminal. A production rule must be of the
		form X --> Y where X is 1 or many symbols (terminal or non-terminal) and Y is 0 or many symbols (terminal or non-terminal).
		An algorithm in the Post Grammar computational model would be seen as the sets of terminal symbols, non-terminal symbols,
		production rules and the initial start symbol together to compute something. It does not look like a set of steps to perform
		in a particular order like you might see in an imperative algorithm but instead a set of declarations where you define
		each set described above in order to create an algorithm for whatever you are trying to compute.
		
		The post grammar computational
		model can be viewed in the same light as the declarative programming paradigm in that both of these only need to concern themselves
		with talking about WHAT something is, not necessarily HOW to compute anything. The production rules of a Post Grammar can be viewed
		as declaring what a symbol is, or can be substituted with.
		
		- Lambda Calculus - Lambda calculus is another computation model based on the idea of defining functions that are abstracted
		to use variables that can be substituted to make the function very reusable. An algorithm in lamda calculus would be a set of
		functions that are composed together in order to compute something. Recursion is heavily used when implementing functions in this
		computational model. The output of one function would be used as the input of another to build an algorithm that computes something.
		This computational model can be viewed in the same light as the functional programming paradigm, it is the idea that this paradigm
		is based on. In both you define functions with inputs and outputs that are composed together in order to compute something.
		The variables are not bounded until you execute an algorithm with some sort of starting input.
		
		- Turing machine - The Turing machine is another computational model that can be seen as a finite state machine where variables
		are written to and read from and computations are performed and results stored. You move from one state to another in this model
		by executing an instruction. An instruction might be writing a new value to a variable or performing a math operation. This model
		is based heavily on executing a sequence of instructions in a particular order, as defined by the algorithm. An algorithm in this
		model would look like a lot of assignment statements and mathematical computations that are executed in a specific order.
		This computational model can be viewed in the same light as the imperative programming paradigm because both of them would
		have you implement an algorithm as a set of variable assignments and computations that are executed in an order. Both deal very
		heavily with HOW to compute something. This can be contrasted with the declarative paradigm which deals with describing WHAT something
		is.
	b. Polog, Lisp/Scheme, Go
		- Prolog - The Prolog programming language was based on the declarative programming paradigm. When you are defining facts and
		relations in prolog you are declaring WHAT something is. You are not talking about HOW to compute anything, Prolog abstracts this
		away from you, for the most part. One of the key ideas behind prolog is a Horn clause. A horn clause is a disjunction of literals
		with at most one positive literal. Horn clauses can be rewritten as implications which is the part of Horn clauses that is evident
		in Prolog. Prolog facts and relations are implications that resemble Horn clauses. Prolog relations can be interpreted in a
		simplified form as 'if these things are true then this thing is true' which is exactly what an implication in logic is.

		
		- Lisp/Scheme - Lisp and a dialect called Scheme are based on the functional programming paradigm which is based on Lamda Calculus.
		It is clear to see this when you
		look at the fact that (almost) everything in Scheme is a pure function definition or invocation. You define functions with inputs
		and outputs and compose them together to compute whatever you are trying to compute.
		
		- Go - Go is based on the imperative programming paradigm which is based on the Turing machine. In go you write sequences of
		statements that are executed in a particular order that you also define. The assignment statement is one of the fundamental ideas
		of this language/programming paradigm where you read from and write to memory locations (variables) that can be viewed as the tape
		used when talking about a Turing machine.
		
		