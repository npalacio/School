1
-Requirements are elicited, they are drawn out from customer using structured method
-2 technical processes in requirements phase of SDLC can integrate security
    -Stakeholder needs and requirements definition process
        -should define stakeholder security requirements
        -this would include protection capabilities, security characteristics and security driven constraints
        -should identify general features and security features
    -System requirements definition process
        -transforming stakeholder requirements to technical system requirements
        -output of this process is list of active protection capabilities
        -should also figure out how strong of assurance is needed for system
-What is the environment vs the machine?
    -stakeholder requirements are typically about the environment
    -system requirements are about the machine
-software needs to fit a purpose, bad software can happen when purpose does not match what was built
-Use cases
    -why and how would someone use the software
    -goal driven scenarios
        -software should accomplish something
-user stories
    -'as a X I want Y so that GOAL'
    -goal driven scenarios
    -Card, Conversation, Confirmation

2 - What is Requirements Engineering (RE)
-RE is bridge between real world user needs and software systems
-RE identifies purpose and context of software
-RE builds bride between stakeholder requirements and system requirements
-Is the env of operation the technical environment or the business environment?
-Shared phenomena = interface = input or output of human and machine
-what is a domain?
    -given domain = things that exist
        -indicative mood
        -'D' = domain properties
    -design domain = what we want to produce as an artifact
        -optative mood = what customer wants to be true
        -'R' = Requirements
-requirements are all about relationships between things in the environment of operation
-system requirements expressed in optative mood (desired state)
    -desired condition of system interface
-problem frames
    -machine = software
    -designed domain = wishes, artifacts
    -given domain = what we have now
    -requirements = the only thing that is not a tangible entity
    -interface = input or output to/from machine
    -requirements constrain domains to behave or be a certain way
-mailbox analyzer example
    -mail to analyze = given domain
    -analysis report = design domain, what we produce
    -mail and report are interface of machine
    -analysis report is constrained by analysis rules (requirements)
    -interface between machine and mail to analyze is an observable event with data (directory of the mail, mail file and mail content)
        -MF! {Directory, file, content}
-'S' = how we want machine to behave at its interfaces
    -system specification
-'S' entails 'D' (given state) and 'R' (desired state)
    -they should all fit together
-Security problem frame vs abuse frame?
    -security frame = security machine, the mechanisms that provide security (authentication)
        -like an answer to the abuse frame
    -abuse frame = like if hacking were a business and you were making a problem frame where the problem you are trying to solve is how to hack something
-anti-requirement = requirement for hacker
-malicious actor would be domain
-the security design problem
    -what security functions are needed in 'S' (system specification) such that given a malicious user D and R are satisfiable?
        -active protections
            -can be implemented in 'S' (software protection) or in 'D' (the domain)
            -in domain an active protection or constraint might be controlled physical access or an authorization database to use
    -what weaknesses should be avoided is 'S' (system specification) such that given a malicious user D and R are satisfiable?
        -passive protections
            -can be avoided in 'S' (using up to date frameworks, SQL parameters)
            -can be avoided in 'D' (no passwords on sticky notes, complex passwords)